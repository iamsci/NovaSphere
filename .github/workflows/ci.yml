name: Frontend CI/CD

# Trigger on pushes and PRs to main, and on changes in frontend/
on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'

jobs:
  build-and-sync:
    name: Build & Capacitor Sync
    runs-on: ubuntu-latest
    env:
      CI: true

    # Run all commands from the frontend directory
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build web assets
        run: npm run build:web

      - name: Capacitor Sync
        run: npx cap sync

      - name: Archive dist folder
        uses: actions/upload-artifact@v3
        with:
          name: web-dist
          path: dist

  android-build:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: build-and-sync
    if: ${{ secrets.ANDROID_KEYSTORE && github.event_name == 'push' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node & reinstall (to restore capacitor files)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: |
          cd frontend
          npm ci
          npx cap sync

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '11'

      - name: Decrypt Android keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks

      - name: Build APK (Release)
        run: |
          cd android
          ./gradlew assembleRelease

      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/app-release.apk

  notify:
    name: Slack & Healthcheck Notification
    runs-on: ubuntu-latest
    needs: [ build-and-sync, android-build ]
    if: always()
    steps:
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": ":rocket: *Frontend CI/CD* for `${{ github.repository }}` completed with *${{ job.status }}* on `${{ github.ref }}`.",
              "attachments":[
                {
                  "color": ${{ job.status == 'success' && '"#36a64f"' || '"#e01414"' }},
                  "fields":[
                    { "title":"Trigger","value":"${{ github.event_name }}","short":true },
                    { "title":"Run by","value":"<@${{ github.actor }}>","short":true }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ping healthcheck URL
        if: secrets.HEALTHCHECK_SUCCESS_URL && secrets.HEALTHCHECK_FAILURE_URL
        run: |
          URL=$([[ "${{ job.status }}" == "success" ]] \
            && echo "${{ secrets.HEALTHCHECK_SUCCESS_URL }}" \
            || echo "${{ secrets.HEALTHCHECK_FAILURE_URL }}")
          curl -fsS --retry 3 "$URL"
